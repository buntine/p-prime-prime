# P′′ - The Original Brainf*ck

When we think of esoteric programming languages, most of us quickly gravitate towards, the now infamous, [Brainfuck](aaa) - a super minimal programming language that achieves [Turing Completeness](aaa) in just six simple instructions (not including the two instructions for I/O).

The incessantly lovely Brainfuck was created in 1993 by Urban Müller in an attempt to construct a usable - albeit barely - programming language with a compiler under 1024 bytes. Why 1024 bytes? Well, he had been inspired by Wouter van Oortmerssen's [FALSE](aaa), a stack-based language with a compiler of exactly 1024 bytes. So I guess you could say it was a competition of sorts.

In this article, we will see that Brainfuck is actually an informal dialect of a programming language invented in Italy 30 years prior: Corrado Böhm's P′′ (or "P Prime Prime").

Let's talk about a bit about Corrado Böhm's place in the history of Computer Science before we get into the nuts and bolts of his decidedly strangely-named creation.

## Corrado Böhm and the Structured Programm Theorem

When we talk about "programming" today, we are almost universally referring to what is known as "structured programming". That is, writing programs that employ the use of block structures, functions and loops. Pretty simple, huh? In fact, this all seems so obvious nowadays that we don't feel the need to quality so specifically what we mean - so we use more general terms like "imperative" and "declarative" to describe our favourite languages.

But it wasn't always this way.

Many of the earliest programming languages, including heavy-hitters like BASIC, FORTRAN, COBOL and several assembly languages, were unstructured: aaa

- GOTO bad
- BOHM
- Papers on p''

## p''

- Syntax
- Semantics

## Brainfuck

- Abstractions on p''
- Examples
