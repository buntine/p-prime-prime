- P′′(P Prime Prime)
- An esoteric/primitive programming language
- Invented by Corrado Böhm in 1964
- Published in paper entitled: "On a family of Turing machines and the related programming language"
  - International Computation Center, bulletin 3, July 1964. Pages 187-194.
- Also used in a later (1966) paper "Flow Diagrams, Turing Machines And Languages With Only Two Formation Rules"
- Proven to be Turing-Complete.
- The first imperative, structured, Turing-complete programming language without a GOTO mechanism.
- Consists of only four instructions: R, λ, (, )
- Effectively a manifestation of a Turing machine 
  - In the same manner that Lisp was a manifestation of Church' Lambda Calculus.

- Syntax rules are simple:
  (i)    λ, R ∈ p″
    - λ and R are words in P″
  (ii)   q₁, q₂ ∈ p″ implies q₁q₂ ∈ p″
    - If q₁ and q₂ are words in p″ then q₁q₂ is a word in p″
  (iii)  q ∈ p″ implies (q) ∈ p″
    - If q is a word in P″, then (q) is a word in P″
  (iiii) Only the expressions that can be derived from (i), (ii), (iii) belong to P″
    - There are no more rules

- Semantics
  - {a[0], a[1]...a[n]} = The alphabet of a Turing machine, where a[0] is the blank symbol (default value).
        - As per usual, there is precisely the sufficient amount of cells available for the computation at hand.
  - λ   = Replace the current symbol, C[i], with c[i+1] (where c[n+1] = c[0]) and then move tape head left one position.
        - This is saying that the tape wraps from the right. So: c[i] = c[i+1] mod (n+1)
  - R   = Move tape head right one position (if possible).
  - (q) = Iterate q in loop while current position is not a[0]
  - Any valid P″ program is a word.
  - Execution starts at a[0] and proceeds left-to-right until there is nothing left to execute.

- Is sufficient to provide some simple abstractions to match the instructions of brainfuck exactly
  - r  = λR
    - Increment current cell.
  - r′ = rⁿ
    - r n times, which will decrement current cell. n = size of memory
    - It's a macro! It's relative to the size, N, of the alphabet.
  - L  = r′λ
    - Move left one cell.

- Now we have:
  - p″: L, R, r, r′, (, )
  - BF: <, >, +, -, [, ]
  - There is no input/output as it's a theoretical machine. But one would add in if creating actual machine.

- Example:
  - R ( R ) L ( r' ( L ( L ) ) r' L ) R r
    - Compute the predecessor (x-1) of an integer x > 0

  - State: 0,  1,  1,  2,  0
           p0  p1  p2  p3  p4
    - 8 encoded in bijective binary (Normal binary but only have 1 and 2; no 0): 1 1 2 = 4 2 2 = 8

  - R         = Move right one place
    ( R )     = Move all the way to the right
    L         = Move left one place
    ( r'      = Decrement current cell
      ( L     = Move left one place
        ( L ) = Move all the way to the left
      )
      r'      = Decrement current cell
      L       = Move left one place
    )
    R         = Move right one place
    r         = Increment current cell

  - R ( r' R r L )
    - Add two numbers

  - State: 0,  3,  3
           p0  p1  p2

  - R    = Move right one place
    ( r' = Decrement current cell
      R  = Move right one place
      r  = Increment current cell
      L  = Move left one cell
    )    = Execute again if current cell (p[1]) is not 0
